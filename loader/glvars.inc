// helper opengl functions
GLenum ( *ldrpglGetError )(void) = NULL;
const GLcharARB * ( *ldrpglGetString )(GLenum name) = NULL;
// base gl functions
void ( *ldrpglAccum )(GLenum op, GLfloat value) = NULL;
void ( *ldrpglAlphaFunc )(GLenum func, GLclampf ref) = NULL;
void ( *ldrpglBegin )(GLenum mode) = NULL;
void ( *ldrpglBindTexture )(GLenum target, GLuint texture) = NULL;
void ( *ldrpglBitmap )(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap) = NULL;
void ( *ldrpglBlendFunc )(GLenum sfactor, GLenum dfactor) = NULL;
void ( *ldrpglCallList )(GLuint list) = NULL;
void ( *ldrpglCallLists )(GLsizei n, GLenum type, const GLvoid *lists) = NULL;
void ( *ldrpglClear )(GLbitfield mask) = NULL;
void ( *ldrpglClearAccum )(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) = NULL;
void ( *ldrpglClearColor )(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha) = NULL;
void ( *ldrpglClearDepth )(GLclampd depth) = NULL;
void ( *ldrpglClearIndex )(GLfloat c) = NULL;
void ( *ldrpglClearStencil )(GLint s) = NULL;
GLboolean ( *ldrpglIsEnabled )( GLenum cap ) = NULL;
GLboolean ( *ldrpglIsList )( GLuint list ) = NULL;
GLboolean ( *ldrpglIsTexture )( GLuint texture ) = NULL;
void ( *ldrpglClipPlane )(GLenum plane, const GLdouble *equation) = NULL;
void ( *ldrpglColor3b )(GLbyte red, GLbyte green, GLbyte blue) = NULL;
void ( *ldrpglColor3bv )(const GLbyte *v) = NULL;
void ( *ldrpglColor3d )(GLdouble red, GLdouble green, GLdouble blue) = NULL;
void ( *ldrpglColor3dv )(const GLdouble *v) = NULL;
void ( *ldrpglColor3f )(GLfloat red, GLfloat green, GLfloat blue) = NULL;
void ( *ldrpglColor3fv )(const GLfloat *v) = NULL;
void ( *ldrpglColor3i )(GLint red, GLint green, GLint blue) = NULL;
void ( *ldrpglColor3iv )(const GLint *v) = NULL;
void ( *ldrpglColor3s )(GLshort red, GLshort green, GLshort blue) = NULL;
void ( *ldrpglColor3sv )(const GLshort *v) = NULL;
void ( *ldrpglColor3ub )(GLubyte red, GLubyte green, GLubyte blue) = NULL;
void ( *ldrpglColor3ubv )(const GLubyte *v) = NULL;
void ( *ldrpglColor3ui )(GLuint red, GLuint green, GLuint blue) = NULL;
void ( *ldrpglColor3uiv )(const GLuint *v) = NULL;
void ( *ldrpglColor3us )(GLushort red, GLushort green, GLushort blue) = NULL;
void ( *ldrpglColor3usv )(const GLushort *v) = NULL;
void ( *ldrpglColor4b )(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) = NULL;
void ( *ldrpglColor4bv )(const GLbyte *v) = NULL;
void ( *ldrpglColor4d )(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) = NULL;
void ( *ldrpglColor4dv )(const GLdouble *v) = NULL;
void ( *ldrpglColor4f )(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) = NULL;
void ( *ldrpglColor4fv )(const GLfloat *v) = NULL;
void ( *ldrpglColor4i )(GLint red, GLint green, GLint blue, GLint alpha) = NULL;
void ( *ldrpglColor4iv )(const GLint *v) = NULL;
void ( *ldrpglColor4s )(GLshort red, GLshort green, GLshort blue, GLshort alpha) = NULL;
void ( *ldrpglColor4sv )(const GLshort *v) = NULL;
void ( *ldrpglColor4ub )(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) = NULL;
void ( *ldrpglColor4ubv )(const GLubyte *v) = NULL;
void ( *ldrpglColor4ui )(GLuint red, GLuint green, GLuint blue, GLuint alpha) = NULL;
void ( *ldrpglColor4uiv )(const GLuint *v) = NULL;
void ( *ldrpglColor4us )(GLushort red, GLushort green, GLushort blue, GLushort alpha) = NULL;
void ( *ldrpglColor4usv )(const GLushort *v) = NULL;
void ( *ldrpglColorMask )(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) = NULL;
void ( *ldrpglColorMaterial )(GLenum face, GLenum mode) = NULL;
void ( *ldrpglCopyPixels )(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) = NULL;
void ( *ldrpglCopyTexImage1D )(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border) = NULL;
void ( *ldrpglCopyTexImage2D )(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) = NULL;
void ( *ldrpglCopyTexSubImage1D )(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) = NULL;
void ( *ldrpglCopyTexSubImage2D )(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) = NULL;
void ( *ldrpglCullFace )(GLenum mode) = NULL;
void ( *ldrpglDeleteLists )(GLuint list, GLsizei range) = NULL;
void ( *ldrpglDeleteTextures )(GLsizei n, const GLuint *textures) = NULL;
void ( *ldrpglDepthFunc )(GLenum func) = NULL;
void ( *ldrpglDepthMask )(GLboolean flag) = NULL;
void ( *ldrpglDepthRange )(GLclampd zNear, GLclampd zFar) = NULL;
void ( *ldrpglDisable )(GLenum cap) = NULL;
void ( *ldrpglDisableClientState )(GLenum array) = NULL;
void ( *ldrpglDrawArrays )(GLenum mode, GLint first, GLsizei count) = NULL;
void ( *ldrpglDrawBuffer )(GLenum mode) = NULL;
void ( *ldrpglDrawPixels )(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels) = NULL;
void ( *ldrpglEdgeFlag )(GLboolean flag) = NULL;
void ( *ldrpglEdgeFlagPointer )(GLsizei stride, const GLvoid *pointer) = NULL;
void ( *ldrpglEdgeFlagv )(const GLboolean *flag) = NULL;
void ( *ldrpglEnable )(GLenum cap) = NULL;
void ( *ldrpglEnableClientState )(GLenum array) = NULL;
void ( *ldrpglEnd )(void) = NULL;
void ( *ldrpglEndList )(void) = NULL;
void ( *ldrpglEvalCoord1d )(GLdouble u) = NULL;
void ( *ldrpglEvalCoord1dv )(const GLdouble *u) = NULL;
void ( *ldrpglEvalCoord1f )(GLfloat u) = NULL;
void ( *ldrpglEvalCoord1fv )(const GLfloat *u) = NULL;
void ( *ldrpglEvalCoord2d )(GLdouble u, GLdouble v) = NULL;
void ( *ldrpglEvalCoord2dv )(const GLdouble *u) = NULL;
void ( *ldrpglEvalCoord2f )(GLfloat u, GLfloat v) = NULL;
void ( *ldrpglEvalCoord2fv )(const GLfloat *u) = NULL;
void ( *ldrpglEvalMesh1 )(GLenum mode, GLint i1, GLint i2) = NULL;
void ( *ldrpglEvalMesh2 )(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) = NULL;
void ( *ldrpglEvalPoint1 )(GLint i) = NULL;
void ( *ldrpglEvalPoint2 )(GLint i, GLint j) = NULL;
void ( *ldrpglFeedbackBuffer )(GLsizei size, GLenum type, GLfloat *buffer) = NULL;
void ( *ldrpglFinish )(void) = NULL;
void ( *ldrpglFlush )(void) = NULL;
void ( *ldrpglFogf )(GLenum pname, GLfloat param) = NULL;
void ( *ldrpglFogfv )(GLenum pname, const GLfloat *params) = NULL;
void ( *ldrpglFogi )(GLenum pname, GLint param) = NULL;
void ( *ldrpglFogiv )(GLenum pname, const GLint *params) = NULL;
void ( *ldrpglFrontFace )(GLenum mode) = NULL;
void ( *ldrpglFrustum )(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) = NULL;
void ( *ldrpglGenTextures )(GLsizei n, GLuint *textures) = NULL;
void ( *ldrpglGetBooleanv )(GLenum pname, GLboolean *params) = NULL;
void ( *ldrpglGetClipPlane )(GLenum plane, GLdouble *equation) = NULL;
void ( *ldrpglGetDoublev )(GLenum pname, GLdouble *params) = NULL;
void ( *ldrpglGetFloatv )(GLenum pname, GLfloat *params) = NULL;
void ( *ldrpglGetIntegerv )(GLenum pname, GLint *params) = NULL;
void ( *ldrpglGetLightfv )(GLenum light, GLenum pname, GLfloat *params) = NULL;
void ( *ldrpglGetLightiv )(GLenum light, GLenum pname, GLint *params) = NULL;
void ( *ldrpglGetMapdv )(GLenum target, GLenum query, GLdouble *v) = NULL;
void ( *ldrpglGetMapfv )(GLenum target, GLenum query, GLfloat *v) = NULL;
void ( *ldrpglGetMapiv )(GLenum target, GLenum query, GLint *v) = NULL;
void ( *ldrpglGetMaterialfv )(GLenum face, GLenum pname, GLfloat *params) = NULL;
void ( *ldrpglGetMaterialiv )(GLenum face, GLenum pname, GLint *params) = NULL;
void ( *ldrpglGetPixelMapfv )(GLenum map, GLfloat *values) = NULL;
void ( *ldrpglGetPixelMapuiv )(GLenum map, GLuint *values) = NULL;
void ( *ldrpglGetPixelMapusv )(GLenum map, GLushort *values) = NULL;
void ( *ldrpglGetPointerv )(GLenum pname, GLvoid* *params) = NULL;
void ( *ldrpglGetPolygonStipple )(GLubyte *mask) = NULL;
void ( *ldrpglGetTexEnvfv )(GLenum target, GLenum pname, GLfloat *params) = NULL;
void ( *ldrpglGetTexEnviv )(GLenum target, GLenum pname, GLint *params) = NULL;
void ( *ldrpglGetTexGendv )(GLenum coord, GLenum pname, GLdouble *params) = NULL;
void ( *ldrpglGetTexGenfv )(GLenum coord, GLenum pname, GLfloat *params) = NULL;
void ( *ldrpglGetTexGeniv )(GLenum coord, GLenum pname, GLint *params) = NULL;
void ( *ldrpglGetTexImage )(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels) = NULL;
void ( *ldrpglGetTexLevelParameterfv )(GLenum target, GLint level, GLenum pname, GLfloat *params) = NULL;
void ( *ldrpglGetTexLevelParameteriv )(GLenum target, GLint level, GLenum pname, GLint *params) = NULL;
void ( *ldrpglGetTexParameterfv )(GLenum target, GLenum pname, GLfloat *params) = NULL;
void ( *ldrpglGetTexParameteriv )(GLenum target, GLenum pname, GLint *params) = NULL;
void ( *ldrpglHint )(GLenum target, GLenum mode) = NULL;
void ( *ldrpglIndexMask )(GLuint mask) = NULL;
void ( *ldrpglIndexPointer )(GLenum type, GLsizei stride, const GLvoid *pointer) = NULL;
void ( *ldrpglIndexd )(GLdouble c) = NULL;
void ( *ldrpglIndexdv )(const GLdouble *c) = NULL;
void ( *ldrpglIndexf )(GLfloat c) = NULL;
void ( *ldrpglIndexfv )(const GLfloat *c) = NULL;
void ( *ldrpglIndexi )(GLint c) = NULL;
void ( *ldrpglIndexiv )(const GLint *c) = NULL;
void ( *ldrpglIndexs )(GLshort c) = NULL;
void ( *ldrpglIndexsv )(const GLshort *c) = NULL;
void ( *ldrpglIndexub )(GLubyte c) = NULL;
void ( *ldrpglIndexubv )(const GLubyte *c) = NULL;
void ( *ldrpglInitNames )(void) = NULL;
void ( *ldrpglInterleavedArrays )(GLenum format, GLsizei stride, const GLvoid *pointer) = NULL;
void ( *ldrpglLightModelf )(GLenum pname, GLfloat param) = NULL;
void ( *ldrpglLightModelfv )(GLenum pname, const GLfloat *params) = NULL;
void ( *ldrpglLightModeli )(GLenum pname, GLint param) = NULL;
void ( *ldrpglLightModeliv )(GLenum pname, const GLint *params) = NULL;
void ( *ldrpglLightf )(GLenum light, GLenum pname, GLfloat param) = NULL;
void ( *ldrpglLightfv )(GLenum light, GLenum pname, const GLfloat *params) = NULL;
void ( *ldrpglLighti )(GLenum light, GLenum pname, GLint param) = NULL;
void ( *ldrpglLightiv )(GLenum light, GLenum pname, const GLint *params) = NULL;
void ( *ldrpglLineStipple )(GLint factor, GLushort pattern) = NULL;
void ( *ldrpglLineWidth )(GLfloat width) = NULL;
void ( *ldrpglListBase )(GLuint base) = NULL;
void ( *ldrpglLoadIdentity )(void) = NULL;
void ( *ldrpglLoadMatrixd )(const GLdouble *m) = NULL;
void ( *ldrpglLoadMatrixf )(const GLfloat *m) = NULL;
void ( *ldrpglLoadName )(GLuint name) = NULL;
void ( *ldrpglLogicOp )(GLenum opcode) = NULL;
void ( *ldrpglMap1d )(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points) = NULL;
void ( *ldrpglMap1f )(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points) = NULL;
void ( *ldrpglMap2d )(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points) = NULL;
void ( *ldrpglMap2f )(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points) = NULL;
void ( *ldrpglMapGrid1d )(GLint un, GLdouble u1, GLdouble u2) = NULL;
void ( *ldrpglMapGrid1f )(GLint un, GLfloat u1, GLfloat u2) = NULL;
void ( *ldrpglMapGrid2d )(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) = NULL;
void ( *ldrpglMapGrid2f )(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) = NULL;
void ( *ldrpglMaterialf )(GLenum face, GLenum pname, GLfloat param) = NULL;
void ( *ldrpglMaterialfv )(GLenum face, GLenum pname, const GLfloat *params) = NULL;
void ( *ldrpglMateriali )(GLenum face, GLenum pname, GLint param) = NULL;
void ( *ldrpglMaterialiv )(GLenum face, GLenum pname, const GLint *params) = NULL;
void ( *ldrpglMatrixMode )(GLenum mode) = NULL;
void ( *ldrpglMultMatrixd )(const GLdouble *m) = NULL;
void ( *ldrpglMultMatrixf )(const GLfloat *m) = NULL;
void ( *ldrpglNewList )(GLuint list, GLenum mode) = NULL;
void ( *ldrpglNormal3b )(GLbyte nx, GLbyte ny, GLbyte nz) = NULL;
void ( *ldrpglNormal3bv )(const GLbyte *v) = NULL;
void ( *ldrpglNormal3d )(GLdouble nx, GLdouble ny, GLdouble nz) = NULL;
void ( *ldrpglNormal3dv )(const GLdouble *v) = NULL;
void ( *ldrpglNormal3f )(GLfloat nx, GLfloat ny, GLfloat nz) = NULL;
void ( *ldrpglNormal3fv )(const GLfloat *v) = NULL;
void ( *ldrpglNormal3i )(GLint nx, GLint ny, GLint nz) = NULL;
void ( *ldrpglNormal3iv )(const GLint *v) = NULL;
void ( *ldrpglNormal3s )(GLshort nx, GLshort ny, GLshort nz) = NULL;
void ( *ldrpglNormal3sv )(const GLshort *v) = NULL;
void ( *ldrpglOrtho )(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) = NULL;
void ( *ldrpglPassThrough )(GLfloat token) = NULL;
void ( *ldrpglPixelMapfv )(GLenum map, GLsizei mapsize, const GLfloat *values) = NULL;
void ( *ldrpglPixelMapuiv )(GLenum map, GLsizei mapsize, const GLuint *values) = NULL;
void ( *ldrpglPixelMapusv )(GLenum map, GLsizei mapsize, const GLushort *values) = NULL;
void ( *ldrpglPixelStoref )(GLenum pname, GLfloat param) = NULL;
void ( *ldrpglPixelStorei )(GLenum pname, GLint param) = NULL;
void ( *ldrpglPixelTransferf )(GLenum pname, GLfloat param) = NULL;
void ( *ldrpglPixelTransferi )(GLenum pname, GLint param) = NULL;
void ( *ldrpglPixelZoom )(GLfloat xfactor, GLfloat yfactor) = NULL;
void ( *ldrpglPointSize )(GLfloat size) = NULL;
void ( *ldrpglPolygonMode )(GLenum face, GLenum mode) = NULL;
void ( *ldrpglPolygonOffset )(GLfloat factor, GLfloat units) = NULL;
void ( *ldrpglPolygonStipple )(const GLubyte *mask) = NULL;
void ( *ldrpglPopAttrib )(void) = NULL;
void ( *ldrpglPopClientAttrib )(void) = NULL;
void ( *ldrpglPopMatrix )(void) = NULL;
void ( *ldrpglPopName )(void) = NULL;
void ( *ldrpglPushAttrib )(GLbitfield mask) = NULL;
void ( *ldrpglPushClientAttrib )(GLbitfield mask) = NULL;
void ( *ldrpglPushMatrix )(void) = NULL;
void ( *ldrpglPushName )(GLuint name) = NULL;
void ( *ldrpglRasterPos2d )(GLdouble x, GLdouble y) = NULL;
void ( *ldrpglRasterPos2dv )(const GLdouble *v) = NULL;
void ( *ldrpglRasterPos2f )(GLfloat x, GLfloat y) = NULL;
void ( *ldrpglRasterPos2fv )(const GLfloat *v) = NULL;
void ( *ldrpglRasterPos2i )(GLint x, GLint y) = NULL;
void ( *ldrpglRasterPos2iv )(const GLint *v) = NULL;
void ( *ldrpglRasterPos2s )(GLshort x, GLshort y) = NULL;
void ( *ldrpglRasterPos2sv )(const GLshort *v) = NULL;
void ( *ldrpglRasterPos3d )(GLdouble x, GLdouble y, GLdouble z) = NULL;
void ( *ldrpglRasterPos3dv )(const GLdouble *v) = NULL;
void ( *ldrpglRasterPos3f )(GLfloat x, GLfloat y, GLfloat z) = NULL;
void ( *ldrpglRasterPos3fv )(const GLfloat *v) = NULL;
void ( *ldrpglRasterPos3i )(GLint x, GLint y, GLint z) = NULL;
void ( *ldrpglRasterPos3iv )(const GLint *v) = NULL;
void ( *ldrpglRasterPos3s )(GLshort x, GLshort y, GLshort z) = NULL;
void ( *ldrpglRasterPos3sv )(const GLshort *v) = NULL;
void ( *ldrpglRasterPos4d )(GLdouble x, GLdouble y, GLdouble z, GLdouble w) = NULL;
void ( *ldrpglRasterPos4dv )(const GLdouble *v) = NULL;
void ( *ldrpglRasterPos4f )(GLfloat x, GLfloat y, GLfloat z, GLfloat w) = NULL;
void ( *ldrpglRasterPos4fv )(const GLfloat *v) = NULL;
void ( *ldrpglRasterPos4i )(GLint x, GLint y, GLint z, GLint w) = NULL;
void ( *ldrpglRasterPos4iv )(const GLint *v) = NULL;
void ( *ldrpglRasterPos4s )(GLshort x, GLshort y, GLshort z, GLshort w) = NULL;
void ( *ldrpglRasterPos4sv )(const GLshort *v) = NULL;
void ( *ldrpglReadBuffer )(GLenum mode) = NULL;
void ( *ldrpglReadPixels )(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels) = NULL;
void ( *ldrpglRectd )(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) = NULL;
void ( *ldrpglRectdv )(const GLdouble *v1, const GLdouble *v2) = NULL;
void ( *ldrpglRectf )(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) = NULL;
void ( *ldrpglRectfv )(const GLfloat *v1, const GLfloat *v2) = NULL;
void ( *ldrpglRecti )(GLint x1, GLint y1, GLint x2, GLint y2) = NULL;
void ( *ldrpglRectiv )(const GLint *v1, const GLint *v2) = NULL;
void ( *ldrpglRects )(GLshort x1, GLshort y1, GLshort x2, GLshort y2) = NULL;
void ( *ldrpglRectsv )(const GLshort *v1, const GLshort *v2) = NULL;
void ( *ldrpglRotated )(GLdouble angle, GLdouble x, GLdouble y, GLdouble z) = NULL;
void ( *ldrpglRotatef )(GLfloat angle, GLfloat x, GLfloat y, GLfloat z) = NULL;
void ( *ldrpglScaled )(GLdouble x, GLdouble y, GLdouble z) = NULL;
void ( *ldrpglScalef )(GLfloat x, GLfloat y, GLfloat z) = NULL;
void ( *ldrpglScissor )(GLint x, GLint y, GLsizei width, GLsizei height) = NULL;
void ( *ldrpglSelectBuffer )(GLsizei size, GLuint *buffer) = NULL;
void ( *ldrpglShadeModel )(GLenum mode) = NULL;
void ( *ldrpglStencilFunc )(GLenum func, GLint ref, GLuint mask) = NULL;
void ( *ldrpglStencilMask )(GLuint mask) = NULL;
void ( *ldrpglStencilOp )(GLenum fail, GLenum zfail, GLenum zpass) = NULL;
void ( *ldrpglTexCoord1d )(GLdouble s) = NULL;
void ( *ldrpglTexCoord1dv )(const GLdouble *v) = NULL;
void ( *ldrpglTexCoord1f )(GLfloat s) = NULL;
void ( *ldrpglTexCoord1fv )(const GLfloat *v) = NULL;
void ( *ldrpglTexCoord1i )(GLint s) = NULL;
void ( *ldrpglTexCoord1iv )(const GLint *v) = NULL;
void ( *ldrpglTexCoord1s )(GLshort s) = NULL;
void ( *ldrpglTexCoord1sv )(const GLshort *v) = NULL;
void ( *ldrpglTexCoord2d )(GLdouble s, GLdouble t) = NULL;
void ( *ldrpglTexCoord2dv )(const GLdouble *v) = NULL;
void ( *ldrpglTexCoord2f )(GLfloat s, GLfloat t) = NULL;
void ( *ldrpglTexCoord2fv )(const GLfloat *v) = NULL;
void ( *ldrpglTexCoord2i )(GLint s, GLint t) = NULL;
void ( *ldrpglTexCoord2iv )(const GLint *v) = NULL;
void ( *ldrpglTexCoord2s )(GLshort s, GLshort t) = NULL;
void ( *ldrpglTexCoord2sv )(const GLshort *v) = NULL;
void ( *ldrpglTexCoord3d )(GLdouble s, GLdouble t, GLdouble r) = NULL;
void ( *ldrpglTexCoord3dv )(const GLdouble *v) = NULL;
void ( *ldrpglTexCoord3f )(GLfloat s, GLfloat t, GLfloat r) = NULL;
void ( *ldrpglTexCoord3fv )(const GLfloat *v) = NULL;
void ( *ldrpglTexCoord3i )(GLint s, GLint t, GLint r) = NULL;
void ( *ldrpglTexCoord3iv )(const GLint *v) = NULL;
void ( *ldrpglTexCoord3s )(GLshort s, GLshort t, GLshort r) = NULL;
void ( *ldrpglTexCoord3sv )(const GLshort *v) = NULL;
void ( *ldrpglTexCoord4d )(GLdouble s, GLdouble t, GLdouble r, GLdouble q) = NULL;
void ( *ldrpglTexCoord4dv )(const GLdouble *v) = NULL;
void ( *ldrpglTexCoord4f )(GLfloat s, GLfloat t, GLfloat r, GLfloat q) = NULL;
void ( *ldrpglTexCoord4fv )(const GLfloat *v) = NULL;
void ( *ldrpglTexCoord4i )(GLint s, GLint t, GLint r, GLint q) = NULL;
void ( *ldrpglTexCoord4iv )(const GLint *v) = NULL;
void ( *ldrpglTexCoord4s )(GLshort s, GLshort t, GLshort r, GLshort q) = NULL;
void ( *ldrpglTexCoord4sv )(const GLshort *v) = NULL;
void ( *ldrpglTexEnvf )(GLenum target, GLenum pname, GLfloat param) = NULL;
void ( *ldrpglTexEnvfv )(GLenum target, GLenum pname, const GLfloat *params) = NULL;
void ( *ldrpglTexEnvi )(GLenum target, GLenum pname, GLint param) = NULL;
void ( *ldrpglTexEnviv )(GLenum target, GLenum pname, const GLint *params) = NULL;
void ( *ldrpglTexGend )(GLenum coord, GLenum pname, GLdouble param) = NULL;
void ( *ldrpglTexGendv )(GLenum coord, GLenum pname, const GLdouble *params) = NULL;
void ( *ldrpglTexGenf )(GLenum coord, GLenum pname, GLfloat param) = NULL;
void ( *ldrpglTexGenfv )(GLenum coord, GLenum pname, const GLfloat *params) = NULL;
void ( *ldrpglTexGeni )(GLenum coord, GLenum pname, GLint param) = NULL;
void ( *ldrpglTexGeniv )(GLenum coord, GLenum pname, const GLint *params) = NULL;
void ( *ldrpglTexImage1D )(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels) = NULL;
void ( *ldrpglTexImage2D )(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels) = NULL;
void ( *ldrpglTexParameterf )(GLenum target, GLenum pname, GLfloat param) = NULL;
void ( *ldrpglTexParameterfv )(GLenum target, GLenum pname, const GLfloat *params) = NULL;
void ( *ldrpglTexParameteri )(GLenum target, GLenum pname, GLint param) = NULL;
void ( *ldrpglTexParameteriv )(GLenum target, GLenum pname, const GLint *params) = NULL;
void ( *ldrpglTexSubImage1D )(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels) = NULL;
void ( *ldrpglTexSubImage2D )(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels) = NULL;
void ( *ldrpglTranslated )(GLdouble x, GLdouble y, GLdouble z) = NULL;
void ( *ldrpglTranslatef )(GLfloat x, GLfloat y, GLfloat z) = NULL;
void ( *ldrpglVertex2d )(GLdouble x, GLdouble y) = NULL;
void ( *ldrpglVertex2dv )(const GLdouble *v) = NULL;
void ( *ldrpglVertex2f )(GLfloat x, GLfloat y) = NULL;
void ( *ldrpglVertex2fv )(const GLfloat *v) = NULL;
void ( *ldrpglVertex2i )(GLint x, GLint y) = NULL;
void ( *ldrpglVertex2iv )(const GLint *v) = NULL;
void ( *ldrpglVertex2s )(GLshort x, GLshort y) = NULL;
void ( *ldrpglVertex2sv )(const GLshort *v) = NULL;
void ( *ldrpglVertex3d )(GLdouble x, GLdouble y, GLdouble z) = NULL;
void ( *ldrpglVertex3dv )(const GLdouble *v) = NULL;
void ( *ldrpglVertex3f )(GLfloat x, GLfloat y, GLfloat z) = NULL;
void ( *ldrpglVertex3fv )(const GLfloat *v) = NULL;
void ( *ldrpglVertex3i )(GLint x, GLint y, GLint z) = NULL;
void ( *ldrpglVertex3iv )(const GLint *v) = NULL;
void ( *ldrpglVertex3s )(GLshort x, GLshort y, GLshort z) = NULL;
void ( *ldrpglVertex3sv )(const GLshort *v) = NULL;
void ( *ldrpglVertex4d )(GLdouble x, GLdouble y, GLdouble z, GLdouble w) = NULL;
void ( *ldrpglVertex4dv )(const GLdouble *v) = NULL;
void ( *ldrpglVertex4f )(GLfloat x, GLfloat y, GLfloat z, GLfloat w) = NULL;
void ( *ldrpglVertex4fv )(const GLfloat *v) = NULL;
void ( *ldrpglVertex4i )(GLint x, GLint y, GLint z, GLint w) = NULL;
void ( *ldrpglVertex4iv )(const GLint *v) = NULL;
void ( *ldrpglVertex4s )(GLshort x, GLshort y, GLshort z, GLshort w) = NULL;
void ( *ldrpglVertex4sv )(const GLshort *v) = NULL;
void ( *ldrpglViewport )(GLint x, GLint y, GLsizei width, GLsizei height) = NULL;
void ( *ldrpglPointParameterfEXT)( GLenum param, GLfloat value ) = NULL;
void ( *ldrpglPointParameterfvEXT)( GLenum param, const GLfloat *value ) = NULL;
void ( *ldrpglLockArraysEXT) (int , int) = NULL;
void ( *ldrpglUnlockArraysEXT) (void) = NULL;
void ( *ldrpglActiveTextureARB)( GLenum ) = NULL;
void ( *ldrpglClientActiveTextureARB)( GLenum ) = NULL;
void ( *ldrpglGetCompressedTexImage)( GLenum target, GLint lod, const void* data ) = NULL;
void ( *ldrpglDrawRangeElements)( GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices ) = NULL;
void ( *ldrpglDrawRangeElementsEXT)( GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices ) = NULL;
void ( *ldrpglDrawElements)(GLenum mode, GLsizei count, GLenum type, const void *indices) = NULL;
void ( *ldrpglVertexPointer)(GLint size, GLenum type, GLsizei stride, const void *ptr) = NULL;
void ( *ldrpglNormalPointer)(GLenum type, GLsizei stride, const void *ptr) = NULL;
void ( *ldrpglColorPointer)(GLint size, GLenum type, GLsizei stride, const void *ptr) = NULL;
void ( *ldrpglTexCoordPointer)(GLint size, GLenum type, GLsizei stride, const void *ptr) = NULL;
void ( *ldrpglArrayElement)(GLint i) = NULL;
void ( *ldrpglMultiTexCoord1f) (GLenum, GLfloat) = NULL;
void ( *ldrpglMultiTexCoord2f) (GLenum, GLfloat, GLfloat) = NULL;
void ( *ldrpglMultiTexCoord3f) (GLenum, GLfloat, GLfloat, GLfloat) = NULL;
void ( *ldrpglMultiTexCoord4f) (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) = NULL;
void ( *ldrpglActiveTexture) (GLenum) = NULL;
void ( *ldrpglClientActiveTexture) (GLenum) = NULL;
void ( *ldrpglCompressedTexImage3DARB)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data) = NULL;
void ( *ldrpglCompressedTexImage2DARB)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data) = NULL;
void ( *ldrpglCompressedTexImage1DARB)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data) = NULL;
void ( *ldrpglCompressedTexSubImage3DARB)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) = NULL;
void ( *ldrpglCompressedTexSubImage2DARB)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) = NULL;
void ( *ldrpglCompressedTexSubImage1DARB)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) = NULL;
void ( *ldrpglDeleteObjectARB)(GLhandleARB obj) = NULL;
GLhandleARB ( *ldrpglGetHandleARB)(GLenum pname) = NULL;
void ( *ldrpglDetachObjectARB)(GLhandleARB containerObj, GLhandleARB attachedObj) = NULL;
GLhandleARB ( *ldrpglCreateShaderObjectARB)(GLenum shaderType) = NULL;
void ( *ldrpglShaderSourceARB)(GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length) = NULL;
void ( *ldrpglCompileShaderARB)(GLhandleARB shaderObj) = NULL;
GLhandleARB ( *ldrpglCreateProgramObjectARB)(void) = NULL;
void ( *ldrpglAttachObjectARB)(GLhandleARB containerObj, GLhandleARB obj) = NULL;
void ( *ldrpglLinkProgramARB)(GLhandleARB programObj) = NULL;
void ( *ldrpglUseProgramObjectARB)(GLhandleARB programObj) = NULL;
void ( *ldrpglValidateProgramARB)(GLhandleARB programObj) = NULL;
void ( *ldrpglBindProgramARB)(GLenum target, GLuint program) = NULL;
void ( *ldrpglDeleteProgramsARB)(GLsizei n, const GLuint *programs) = NULL;
void ( *ldrpglGenProgramsARB)(GLsizei n, GLuint *programs) = NULL;
void ( *ldrpglProgramStringARB)(GLenum target, GLenum format, GLsizei len, const void *string) = NULL;
void ( *ldrpglProgramEnvParameter4fARB)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) = NULL;
void ( *ldrpglProgramLocalParameter4fARB)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) = NULL;
void ( *ldrpglGetProgramivARB)( GLenum target, GLenum pname, GLint *params ) = NULL;
void ( *ldrpglUniform1fARB)(GLint location, GLfloat v0) = NULL;
void ( *ldrpglUniform2fARB)(GLint location, GLfloat v0, GLfloat v1) = NULL;
void ( *ldrpglUniform3fARB)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) = NULL;
void ( *ldrpglUniform4fARB)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) = NULL;
void ( *ldrpglUniform1iARB)(GLint location, GLint v0) = NULL;
void ( *ldrpglUniform2iARB)(GLint location, GLint v0, GLint v1) = NULL;
void ( *ldrpglUniform3iARB)(GLint location, GLint v0, GLint v1, GLint v2) = NULL;
void ( *ldrpglUniform4iARB)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) = NULL;
void ( *ldrpglUniform1fvARB)(GLint location, GLsizei count, const GLfloat *value) = NULL;
void ( *ldrpglUniform2fvARB)(GLint location, GLsizei count, const GLfloat *value) = NULL;
void ( *ldrpglUniform3fvARB)(GLint location, GLsizei count, const GLfloat *value) = NULL;
void ( *ldrpglUniform4fvARB)(GLint location, GLsizei count, const GLfloat *value) = NULL;
void ( *ldrpglUniform1ivARB)(GLint location, GLsizei count, const GLint *value) = NULL;
void ( *ldrpglUniform2ivARB)(GLint location, GLsizei count, const GLint *value) = NULL;
void ( *ldrpglUniform3ivARB)(GLint location, GLsizei count, const GLint *value) = NULL;
void ( *ldrpglUniform4ivARB)(GLint location, GLsizei count, const GLint *value) = NULL;
void ( *ldrpglUniformMatrix2fvARB)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) = NULL;
void ( *ldrpglUniformMatrix3fvARB)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) = NULL;
void ( *ldrpglUniformMatrix4fvARB)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) = NULL;
void ( *ldrpglGetObjectParameterfvARB)(GLhandleARB obj, GLenum pname, GLfloat *params) = NULL;
void ( *ldrpglGetObjectParameterivARB)(GLhandleARB obj, GLenum pname, GLint *params) = NULL;
void ( *ldrpglGetInfoLogARB)(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog) = NULL;
void ( *ldrpglGetAttachedObjectsARB)(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj) = NULL;
GLint ( *ldrpglGetUniformLocationARB)(GLhandleARB programObj, const GLcharARB *name) = NULL;
void ( *ldrpglGetActiveUniformARB)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name) = NULL;
void ( *ldrpglGetUniformfvARB)(GLhandleARB programObj, GLint location, GLfloat *params) = NULL;
void ( *ldrpglGetUniformivARB)(GLhandleARB programObj, GLint location, GLint *params) = NULL;
void ( *ldrpglGetShaderSourceARB)(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source) = NULL;
void ( *ldrpglTexImage3D)( GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels ) = NULL;
void ( *ldrpglTexSubImage3D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels ) = NULL;
void ( *ldrpglCopyTexSubImage3D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height ) = NULL;
void ( *ldrpglBlendEquationEXT)(GLenum) = NULL;
void ( *ldrpglStencilOpSeparate)(GLenum, GLenum, GLenum, GLenum) = NULL;
void ( *ldrpglStencilFuncSeparate)(GLenum, GLenum, GLint, GLuint) = NULL;
void ( *ldrpglActiveStencilFaceEXT)(GLenum) = NULL;
void ( *ldrpglVertexAttribPointerARB)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer) = NULL;
void ( *ldrpglEnableVertexAttribArrayARB)(GLuint index) = NULL;
void ( *ldrpglDisableVertexAttribArrayARB)(GLuint index) = NULL;
void ( *ldrpglBindAttribLocationARB)(GLhandleARB programObj, GLuint index, const GLcharARB *name) = NULL;
void ( *ldrpglGetActiveAttribARB)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name) = NULL;
GLint ( *ldrpglGetAttribLocationARB)(GLhandleARB programObj, const GLcharARB *name) = NULL;
void ( *ldrpglBindBufferARB) (GLenum target, GLuint buffer) = NULL;
void ( *ldrpglDeleteBuffersARB) (GLsizei n, const GLuint *buffers) = NULL;
void ( *ldrpglGenBuffersARB) (GLsizei n, GLuint *buffers) = NULL;
GLboolean ( *ldrpglIsBufferARB) (GLuint buffer) = NULL;
void* ( *ldrpglMapBufferARB) (GLenum target, GLenum access) = NULL;
GLboolean ( *ldrpglUnmapBufferARB) (GLenum target) = NULL;
void ( *ldrpglBufferDataARB) (GLenum target, GLsizeiptrARB size, const void *data, GLenum usage) = NULL;
void ( *ldrpglBufferSubDataARB) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data) = NULL;
void ( *ldrpglGenQueriesARB) (GLsizei n, GLuint *ids) = NULL;
void ( *ldrpglDeleteQueriesARB) (GLsizei n, const GLuint *ids) = NULL;
GLboolean ( *ldrpglIsQueryARB) (GLuint id) = NULL;
void ( *ldrpglBeginQueryARB) (GLenum target, GLuint id) = NULL;
void ( *ldrpglEndQueryARB) (GLenum target) = NULL;
void ( *ldrpglGetQueryivARB) (GLenum target, GLenum pname, GLint *params) = NULL;
void ( *ldrpglGetQueryObjectivARB) (GLuint id, GLenum pname, GLint *params) = NULL;
void ( *ldrpglGetQueryObjectuivARB) (GLuint id, GLenum pname, GLuint *params) = NULL;
void ( * ldrpglSelectTextureSGIS )( GLenum ) = NULL;
void ( * ldrpglMTexCoord2fSGIS )( GLenum, GLfloat, GLfloat ) = NULL;
void ( * ldrpglSwapInterval )( int interval ) = NULL;
GLboolean ( *ldrpglIsRenderbuffer )(GLuint renderbuffer) = NULL;
void ( *ldrpglBindRenderbuffer )(GLenum target, GLuint renderbuffer) = NULL;
void ( *ldrpglDeleteRenderbuffers )(GLsizei n, const GLuint *renderbuffers) = NULL;
void ( *ldrpglGenRenderbuffers )(GLsizei n, GLuint *renderbuffers) = NULL;
void ( *ldrpglRenderbufferStorage )(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) = NULL;
void ( *ldrpglRenderbufferStorageMultisample )(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) = NULL;
void ( *ldrpglGetRenderbufferParameteriv )(GLenum target, GLenum pname, GLint *params) = NULL;
GLboolean ( *ldrpglIsFramebuffer )(GLuint framebuffer) = NULL;
void ( *ldrpglBindFramebuffer )(GLenum target, GLuint framebuffer) = NULL;
void ( *ldrpglDeleteFramebuffers )(GLsizei n, const GLuint *framebuffers) = NULL;
void ( *ldrpglGenFramebuffers )(GLsizei n, GLuint *framebuffers) = NULL;
GLenum ( *ldrpglCheckFramebufferStatus )(GLenum target) = NULL;
void ( *ldrpglFramebufferTexture1D )(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) = NULL;
void ( *ldrpglFramebufferTexture2D )(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) = NULL;
void ( *ldrpglFramebufferTexture3D )(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer) = NULL;
void ( *ldrpglFramebufferTextureLayer )(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) = NULL;
void ( *ldrpglFramebufferRenderbuffer )(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) = NULL;
void ( *ldrpglGetFramebufferAttachmentParameteriv )(GLenum target, GLenum attachment, GLenum pname, GLint *params) = NULL;
void ( *ldrpglBlitFramebuffer )(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) = NULL;
void ( *ldrpglGenerateMipmap )(GLenum target) = NULL;
void ( *ldrpglGetCompressedTexImageARB) (GLenum target, GLint level, GLvoid *img) = NULL;
void ( *ldrpglCopyTexSubImage3DEXT) (GLenum a, GLint b, GLint c, GLint d, GLint e, GLint f, GLint g, GLsizei h, GLsizei i) = NULL;
void ( *ldrpglTexSubImage3DEXT)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels) = NULL;
void ( *ldrpglTexImage3DEXT)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels) = NULL;
void ( *ldrpglMultiTexCoord1fARB)(GLenum target, GLfloat s) = NULL;
void ( *ldrpglMultiTexCoord2fARB)(GLenum target, GLfloat s, GLfloat t) = NULL;
void ( *ldrpglMultiTexCoord3fARB)(GLenum target, GLfloat s, GLfloat t, GLfloat r) = NULL;
void ( *ldrpglMultiTexCoord4fARB)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) = NULL;
void ( *ldrpglBindVertexArray)(GLuint array) = NULL;
void ( *ldrpglDeleteVertexArrays)(GLsizei n, const GLuint *arrays) = NULL;
void ( *ldrpglGenVertexArrays)(GLsizei n, GLuint *arrays) = NULL;
GLboolean ( *ldrpglIsVertexArray)(GLuint array) = NULL;
void ( *ldrpglDebugMessageControlARB)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled) = NULL;
void ( *ldrpglDebugMessageInsertARB)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf) = NULL;
void ( *ldrpglDebugMessageCallbackARB)(GLvoid *callback, GLvoid *userParam) = NULL;
GLuint ( *ldrpglGetDebugMessageLogARB)(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) = NULL;
void ( *ldrpglVertexAttrib2f)(GLuint index, GLfloat v0, GLfloat v1) = NULL;
void ( *ldrpglVertexAttrib2fv)(GLuint index, const GLfloat *v) = NULL;
void ( *ldrpglVertexAttrib3fv)(GLuint index, const GLfloat *v) = NULL;
//#include "glfuncs.inc"
